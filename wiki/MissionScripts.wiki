#summary Mission scripts
#labels Featured

= Mission scripts =

Missions can be easily extended with custom scripts to add special events to them. Each missions script is located in `\Maps\map_name\map_name.script` file, which can be opened in any plain text editor (e.g. Notepad). Scripts are written in PascalScript language (syntax is very similar to usual Pascal).

Script has 3 ways of interacting with the game - *Events*, *States* and *Actions*. Events get called by the game when they happen. States are values that can be queried from the game. Actions are way to tell the game what to do. Scripts get verified on mission load and any errors are output in a message to a player.

Script file consists of several parts:

{{{
//Global constants section,  accessible from any place in the script.
//Useful to make parameters easy to change in one place.
const
  MY_CONSTANT = 7; //by convention constants are written in upper case

//Global variables section, accessible from any place in the script and stored in game memory
var
  I: Integer; //variable number
  A: array [0..3] of Boolean; //array of 4 booleans accessible as A[0], A[1] etc.

//Event handler, when the event happens ingame this function gets called
procedure OnHouseBuilt(..); //Each event has different input parameters list
var //Local variables, they exist only within this procedure
  L: Integer; //variable number 
begin
  //Event code
  L := 7; //assignment of number to a variable
  Actions.ShowMsg(0,L); //Calling a games action with 2 parameters: 0 and L
end;

//Event handler for "tick" event, which happens 10 times per second (on each game logic update).
procedure OnTick;
begin
  //Code here
  if States.GameTime = 60 then //Check game time and show a message
    Actions.ShowMsg(0,3);
end;
}}}

Here is Battle Tutorial script explained:

{{{
procedure OnPlayerDefeated(aIndex: Integer);
begin
  if aIndex = 2 then Actions.ShowMsg(0, 2);
  if aIndex = 3 then Actions.ShowMsg(0, 3);
  if aIndex = 4 then Actions.ShowMsg(0, 4);
end;

procedure OnTick;
begin
  if States.GameTime = 20 then 
    Actions.ShowMsg(0, 1);
end;
}}}

Above line means that when PlayerDefeated event comes from the game, we check the index of the player that was defeated (aIndex) and issue a command to show certain message to specified player (0, who is human). Also, each tick we check the games time and on tick 20 (2 seconds from mission starting) we show another message.


==Lookup tables==

 * titles typed in *bold* are implemented in public version.
 * titles typed in normal are implemented, but not in public version.
 * titles typed in ~~crossed out~~ were planned, but were rejected.


===Events===

|| Progress || Event || Description || Parameters and types ||
|| + || `OnTick` || Occurs every game logic update ||  ||
|| + || `OnMissionStart` || Occurs immediately after the mission is loaded ||  ||
|| + || `OnPlayerDefeated` || Occurs when certain player has been defeated. Defeat conditions are checked separately by Player AI || aIndex: Integer; //Index of defeated player ||
|| + || `OnPlayerVictory` || Occurs when certain player is declared victorious. Victory conditions are checked separately by Player AI || aIndex: Integer; //Index of victorious player ||
|| + || `OnHouseBuilt` || Occurs when player has built a house || aHouseID: Integer; //HouseID of the house that was built ||
|| + || `OnHouseLost` || Occurs when player loses a house (including self-destruction) || aIndex: Integer; //Index of player who lost it <br> aHouseType: Integer; //Type of house that was lost ||
|| + || `OnHouseDestroyed` || Occurs when player destroys an enemy house || aIndex: Integer; //Index of player who lost it <br> aDestroyerIndex: Integer; //Index of player who destroyed it <br> aHouseType: Integer; //Type of house that was destroyed||
|| + || `OnUnitTrained` || Occurs when player trains a unit || aUnitID: Integer; //UnitID of the unit that was trained ||
|| + || `OnUnitLost` || Occurs when player loses a unit (including starvation) || aIndex: Integer; //Index of player who lost it <br> aUnitType: Integer; //Type of unit that was lost ||
|| + || `OnUnitKilled` || Occurs when player kills a unit || aIndex: Integer; //Index of player who lost it <br> aKillerIndex: Integer; //Index of player who killed it <br> aUnitType: Integer; //Type of unit that was killed ||
|| + || `OnWarriorEquipped` || Occurs when player equips a warrior || aUnitID: Integer; //UnitID of the unit that was trained <br> aGroupID: Integer; //GroupID of the warrior that was equipped ||

Events are written in a form *procedure EVENT_NAME(EVENT_PARAMETERS);* like so:
{{{
procedure OnHouseBuilt(aIndex: Integer; aHouseType: Integer);
begin
  //code
end;
}}}

===States===
All states parameters are numeric and get mapped to unit/house types according to default tables used in DAT scripts.

|| Progress || State || Description || Query parameters || Type of return value ||
|| + || `ArmyCount` || How many military units player has || 1 - player index || Integer ||
|| + || `GameTime` || Get the number of game ticks since mission start || - || Integer ||
|| + || `PeaceTime` || Length of peacetime in ticks (multiplayer) || - || Integer ||
|| + || `CheckAlliance` || Check how player 1 feels towards player 2 (order matters). Returns true for ally, false for enemy ||1 - player index <br> 2 - player index || Boolean ||
|| + || `CitizenCount` || How many citizen player has || 1 - player index || Integer ||
|| - || `FindUnitInZone` || 
|| - || `GetUnitDirection` ||
|| - || `GetUnitPosition` ||
|| + || `HouseTypeCount` || Specified house type count || 1 - player index  <br> 2 - house type || Integer ||
|| + || `PlayerCount` || How many active players there are || - || Integer ||
|| + || `PlayerDefeated` || See if player was defeated || 1 - player index || Boolean ||
|| + || `UnitCount` || Total unit count || 1 - player index || Integer ||
|| + || `UnitTypeCount` || Specified unit type count || 1 - player index  <br> 2 - unit type || Integer ||
|| + || `PlayerName` || Get name of player as a string (for multiplayer) || 1 - player index || AnsiString ||
|| + || `PlayerEnabled` || Will be false if nobody selected that location in multiplayer || 1 - player index || Boolean ||
|| + || `HouseAt` || Returns the ID of the house at the specified location or -1 if no house exists there || 1 - X coordinate <br> 2 - Y coordinate || Integer ||
|| + || `HouseDestroyed` || Returns true if the house is destroyed || 1 - House ID || Boolean ||
|| + || `HouseOwner` || Returns the owner of the specified house or -1 if House ID invalid || 1 - House ID || Integer ||
|| + || `HouseDamage` || Returns the damage of the specified house or -1 if House ID invalid || 1 - House ID || Integer ||
|| + || `HouseType` || Returns the type of the specified house || 1 - House ID || Integer ||
|| + || `KaMRandom` || Returns a random single (float) such that: 0 <= Number < 1.0 ||  || Single ||
|| + || `KaMRandomI` || Returns a random integer such that: 0 <= Number < LimitPlusOne || 1 - LimitPlusOne || Integer ||
|| + || `UnitAt` || Returns the ID of the unit on the specified tile or -1 if no unit exists there || 1 - X coordinate <br> 2 - Y coordinate || Integer ||
|| + || `UnitDead` || Returns true if the unit is dead || 1 - Unit ID || Boolean ||
|| + || `UnitOwner` || Returns the owner of the specified unit or -1 if Unit ID invalid || 1 - Unit ID || Integer ||
|| + || `UnitType` || Returns the type of the specified unit || 1 - Unit ID || Integer ||
|| + || `UnitHunger` || Returns the hunger level of the specified unit as number of ticks until death or -1 if Unit ID invalid || 1 - Unit ID || Integer ||
|| + || `UnitMaxHunger` || Gives the maximum hunger level a unit can have in ticks until death ||  || Integer ||
|| + || `UnitLowHunger` || Gives the hunger level when a unit will try to eat in ticks until death ||  || Integer ||
|| + || `UnitsGroup` || Returns the group that the specified unit (warrior) belongs to or -1 if it does not belong to a group || 1 - Unit ID || Integer ||
|| + || `GroupAt` || Returns the ID of the group of the unit on the specified tile or -1 if no group exists there || 1 - X coordinate <br> 2 - Y coordinate || Integer ||
|| + || `GroupDead` || Returns true if the group is dead (all members dead or joined other groups) || 1 - Group ID || Boolean ||
|| + || `GroupOwner` || Returns the owner of the specified group or -1 if Group ID invalid || 1 - Group ID || Integer ||
|| + || `GroupMemberCount` || Returns the total number of members of the specified group || 1 - Group ID || Integer ||
|| + || `GroupMember` || Returns the unit ID of the specified group member. Member 0 will be the flag holder, 1...GroupMemberCount-1 will be the other members (0 <= MemberIndex <= GroupMemberCount-1) || 1 - Group ID <br> 2 - Member index || Integer ||
|| + || `UnitKilledCount` || Returns the number of the specified unit killed by the specified player || 1 - Player ID <br> 2 - Unit type || Integer ||
|| + || `UnitLostCount` || Returns the number of the specified unit lost by the specified player || 1 - Player ID <br> 2 - Unit type || Integer ||
|| + || `ResourceProducedCount` || Returns the number of the specified resource produced by the specified player || 1 - Player ID <br> 2 - Resource type || Integer ||
|| + || `HouseRepair` || Returns true if the specified house has repair enabled || 1 - House ID || Boolean ||
|| + || `HouseDeliveryBlocked` || Returns true if the specified house has delivery disabled || 1 - House ID || Boolean ||
|| + || `HouseResourceAmount` || Returns the amount of the specified resource in the specified house || 1 - House ID <br> 2 - Resource type || Integer ||
|| + || `HouseHasOccupant` || Returns true if the specified house currently has an occupant || 1 - House ID || Boolean ||

States are queried in a form *States.STATE_NAME(STATE_PARAMETERS)* like so:
{{{
if States.PlayerCount > 5 then
  A := States.UnitCount(1);
}}}

===Actions===
All action parameters are numeric and get mapped to unit/house types according to default tables used in DAT scripts.

|| Progress || Action || Description || Parameters (Integer) || Return value () ||
|| - || `AllianceChange` || Change the alliance setting between specified players || 1 - player whose alliance setting will be changed <br> 2 - target player to whom the alliance will be changed <br> 3 - new alliance setting (0 enemy, 1 ally) ||
|| - || `ChangeUnitOwner` || Take unit from one player and give it to another ||
|| - || `ChangeHouseOwner` || Take house from one player and give it to another ||
|| + || `Defeat` || Proclaims player defeated || 1 - player index ||
|| + || `Victory` || Set specified player(s) victorious, and all team members of those player(s) if the 2nd parameter TeamVictory is set to true. All players who were not set to victorious are set to defeated. || 1 - array player index <br> 2 - Boolean: TeamVictory ||
|| + || `GiveGroup` || Give player group of warriors and return the group ID or -1 if the group was not able to be added || 1 - player index <br> 2 - Unit type <br> 3 - location X <br> 4 - location Y <br> 5 - face direction <br> 6 - unit count <br> 7 - units per row || GroupID: Integer ||
|| + || `GroupOrderWalk` || Order the specified group to walk somewhere || 1 - Group ID <br> 2 - X <br> 3 - Y <br> 4 - Direction ||
|| + || `GroupOrderAttackHouse` || Order the specified group to attack the specified house || 1 - Group ID <br> 2 - House ID ||
|| + || `GroupOrderAttackUnit` || Order the specified group to attack the specified unit || 1 - Group ID <br> 2 - Unit ID ||
|| + || `GiveUnit` || Give player a single citizen and returns the unit ID or -1 if the unit was not able to be added || 1 - player index <br> 2 - Unit type <br> 3 - location X <br> 4 - location Y <br> 5 - face direction || UnitID: Integer ||
|| + || `GiveAnimal` || Adds an animal to the game and returns the unit ID or -1 if the animal was not able to be added || 1 - Animal type <br> 2 - location X <br> 3 - location Y || UnitID: Integer ||
|| + || `GiveWares` || Adds amount of wares to players 1st Store || 1 - player index <br> 2 - ware type <br> 3 - count ||
|| - || `LockUnit` || Lock out the unit from game updates and make it manually scriptable (?) ||
|| - || `SetGroupHunger` || Set hunger level for all group members ||
|| + || `SetUnitDirection` || Makes the specified unit face a certain direction || 1 - Unit ID <br> 2 - Direction ||
|| + || `KillUnit` || Kills the specified unit || 1 - Unit ID ||
|| + || `SetUnitHunger` || Sets the hunger level of the specified unit in ticks until death || 1 - Unit ID <br> 2 - Hunger level (ticks until death) ||
|| - || `SetUnitPosition` || Magically move unit from one place to another (?) ||
|| + || `RevealCircle` || Reveals a circle in fog of war for player || 1 - player index <br> 2 - location X <br> 3 - location Y <br> 4 - radius (255 means whole map) ||
|| + || `ShowMsg` || Displays a message to the player || 1 - player index <br> 2 - Message index in missions LIBX file ||
|| + || `ShowMsgFormatted` || Displays a message to the player with formatted arguments (same as [http://www.delphibasics.co.uk/RTL.asp?Name=Format Format] function) || 1 - player index <br> 2 - Message index in missions LIBX file <br> 3 - Array of arguments ||
|| + || `SetOverlayText` || Sets text overlaid on top left of screen || 1 - player index <br> 2 - Message index in missions LIBX file ||
|| + || `SetOverlayTextFormatted` || Sets text overlaid on top left of screen with formatted arguments (same as [http://www.delphibasics.co.uk/RTL.asp?Name=Format Format] function) || 1 - player index <br> 2 - Message index in missions LIBX file <br> 3 - Array of arguments ||
|| + || `UnlockHouse` || Explicitly allow player to build houses of specified type || 1 - player index <br> 2 - House type ||
|| + || `AddHouseDamage` || Add damage to the specified house || 1 - House ID <br> 2 - Damage amount ||
|| + || `DestroyHouse` || Destroys the specified house || 1 - House ID ||
|| + || `GiveWaresToHouse` || Add wares to the specified house || 1 - House ID <br> 2 - ware type <br> 3 - count ||
|| + || `AddRoadPlan` || Adds a road plan || 1 - Player index <br> 2 - X <br> 3 - Y ||
|| + || `AddFieldPlan` || Adds a corn field plan || 1 - Player index <br> 2 - X <br> 3 - Y ||
|| + || `AddWinefieldPlan` || Adds a wine field plan || 1 - Player index <br> 2 - X <br> 3 - Y ||
|| + || `AddHousePlan` || Adds a house plan || 1 - Player index <br> 2 - House type <br> 3 - X <br> 4 - Y ||
|| + || `SetHouseDeliveryBlocked` || Sets delivery blocking for the specified house || 1 - House ID <br> 2 - Boolean: Blocked ||
|| + || `SchoolAddToQueue` || Adds the specified unit to the specified school's queue || 1 - House ID <br> 2 - Unit type <br> 3 - Count ||
|| + || `BarracksEquip` || Equips the specified unit from the specified barracks || 1 - House ID <br> 2 - Unit type <br> 3 - Count ||
|| + || `GroupOrderFood` || Order the specified group to request food || 1 - Group ID ||
|| + || `GroupOrderHalt` || Order the specified group to halt || 1 - Group ID ||
|| + || `GroupOrderStorm` || Order the specified group to storm attack || 1 - Group ID ||
|| + || `GroupOrderLink` || Order the first specified group to link to the second specified group || 1 - Group ID <br> 2 - Group ID ||
|| + || `GroupSetFormation` || Sets the number of columns (men per row) for the specified group || 1 - Group ID <br> 2 - Columns ||

Actions are placed in a form *Actions.ACT_NAME(ACT_PARAMETERS);* like so:
{{{
if States.GameTime = 300 then
  Actions.Defeat(0); //Defeat 1st player
}}}