#summary Mission scripts
#labels Featured

= Mission scripts =

Missions can be easily extended with custom scripts to add special events to them. Each missions script is located in `\Maps\map_name\map_name.script` file, which can be opened in any plain text editor (e.g. Notepad). Scripts are written in PascalScript language (syntax is very similar to usual Pascal).

Script has 3 ways of interacting with the game - *Events*, *States* and *Actions*. Events get called by the game when they happen. States are values that can be queried from the game. Actions are way to tell the game what to do. Scripts get verified on mission load and any errors are output in a message to a player.

Script file consists of several parts:

{{{
//Global variables section, accessible from any place in the script and stored in game memory
var
  I: Integer; //variable number
  A: array [0..3] of Boolean; //array of 4 booleans accessible as A[0], A[1] etc.

//Event handler, when the event happens ingame this function gets called
procedure OnHouseBuilt(..); //Ecah event has different input parameters list
var //Local variables, they exist only within this procedure
  L: Integer; //variable number 
begin
  //Event code
  L := 7; //assignment of number to a variable
  Actions.ShowMsg(0,L); //Calling a games action with 2 parameters: 0 and L
end;

//Main section which gets executed each game tick
begin
  //Code here
  if States.GameTime = 60 then //Check game time and show a message
    Actions.ShowMsg(0,3);
end. //script must end with a stop sign .
}}}

Here is Battle Tutorial script explained:

{{{
procedure OnPlayerDefeated(aIndex: Integer);
begin
  if aIndex = 2 then Actions.ShowMsg(0, 2);
  if aIndex = 3 then Actions.ShowMsg(0, 3);
  if aIndex = 4 then Actions.ShowMsg(0, 4);
end;

begin
  if States.GameTime = 20 then 
    Actions.ShowMsg(0, 1);
end.
}}}

Above line means that when PlayerDefeated event comes from the game, we check the index of the player that was defeated (aIndex) and issue a command to show certain message to specified player (0, who is human). Also, each tick we check the games time and on tick 20 we show another message.


==Lookup tables==

 * titles typed in *bold* are implemented in public version.
 * titles typed in normal are implemented, but not in public version.
 * titles typed in ~~crossed out~~ were planned, but were rejected.


===Events===

|| Progress || Event || Description || Parameters and types ||
|| + || `OnPlayerDefeated` || Occurs when certain player has been defeated. Defeat conditions are checked separately by Player AI || aIndex: Integer; //Index of defeated player ||
|| + || `OnHouseBuilt` || Occurs when player has built a house || aIndex: Integer; //Index of player who built it <br> aHouseType: Integer; //Type of house that was built ||

Events are written in a form *procedure EVENT_NAME(EVENT_PARAMETERS);* like so:
{{{
procedure OnHouseBuilt(aIndex: Integer; aHouseType: Integer);
begin
  //code
end;
}}}

===States===
All states parameters are numeric and get mapped to unit/house types according to default tables used in DAT scripts.

|| Progress || State || Description || Query parameters || Type of return value ||
|| + || `ArmyCount` || How many military units player has || 1 - player index || Integer ||
|| + || `GameTime` || Get the number of game ticks since mission start || - || Integer ||
|| - || `CheckAlliance` || Check how player 1 feels towards player 2 (order matters) ||1 - player index <br> 2 - player index || Integer ||
|| + || `CitizenCount` || How many citizen player has || 1 - player index || Integer ||
|| - || `FindUnitInZone` || 
|| - || `GetUnitDirection` ||
|| - || `GetUnitHunger` || Check unit hunger level ||
|| - || `GetUnitOwner` || 
|| - || `GetUnitPosition` ||
|| - || `GetUnitType` || Check type of the unit ||
|| + || `PlayerCount` || How many active players there are || - || Integer ||
|| + || `PlayerDefeated` || See if player was defeated || 1 - player index || Boolean ||
|| + || `UnitCount` || Total unit count || 1 - player index || Integer ||
|| + || `UnitTypeCount` || Specified unit type count || 1 - player index  <br> 2 - unit type || Integer ||

States are queried in a form *States.STATE_NAME(STATE_PARAMETERS)* like so:
{{{
if States.PlayerCount > 5 then
  A := States.UnitCount(1);
}}}

===Actions===
All action parameters are numeric and get mapped to unit/house types according to default tables used in DAT scripts.

|| Progress || Action || Description || Parameters (Integer) || Return value () ||
|| - || `AllianceChange` || Change the alliance setting between specified players || 1 - player whose alliance setting will be changed <br> 2 - target player to whom the alliance will be changed <br> 3 - new alliance setting (0 enemy, 1 ally) ||
|| - || `ChangeUnitOwner` || Take unit from one player and give it to another ||
|| + || `Defeat` || Proclaims player defeated || 1 - player index ||
|| + || `GiveGroup` || Give player group of units (citizens or warriors) || 1 - player index <br> 2 - Unit type <br> 3 - location X <br> 4 - location Y <br> 5 - face direction <br> 6 - unit count <br> 7 - units per row || ~~GroupID: Integer~~ ||
|| - || `GiveGroupOrder` || Give an order to the group ||
|| + || `GiveUnit` || Give player a single citizen || 1 - player index <br> 2 - Unit type <br> 3 - location X <br> 4 - location Y <br> 5 - face direction || ~~UnitID: Integer~~ ||
|| + || `GiveWares` || Adds amount of wares to players 1st Store || 1 - player index <br> 2 - ware type <br> 3 - count ||
|| - || `LockUnit` || Lock out the unit from game updates and make it manually scriptable (?) ||
|| - || `SetGroupHunger` || Set hunger level for all group members ||
|| - || `SetUnitDirection` ||
|| - || `SetUnitHunger` || Set unit hunger level ||
|| - || `SetUnitPosition` || Magically move unit from one place to another (?) ||
|| - || `ShowCountdown` || Display countdown for player || 1. player index <br> 2. Value to count from ||
|| + || `RevealCircle` || Reveals a circle in fog of war for player || 1 - player index <br> 2 - location X <br> 3 - location Y <br> 4 - radius (255 means whole map) ||
|| + || `ShowMsg` || Displays a message to the player || 1 - player index <br> 2 - Message index in missions LIBX file ||
|| + || `UnlockHouse` || Explicitly allow player to build houses of specified type || 1 - player index <br> 2 - House type ||
|| - || ~~`Victory`~~ || Set player victorious. (We can't make just 1 player victorious. If he has allies, they would win too) || 1 - player index ||

Actions are placed in a form *Actions.ACT_NAME(ACT_PARAMETERS);* like so:
{{{
if States.GameTime = 300 then
  Actions.Defeat(0); //Defeat 1st player
}}}