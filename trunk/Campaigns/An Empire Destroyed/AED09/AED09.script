//Script by Randziu/Random Lyrics
type aTIMER =
	record
	enabled: boolean;
	hours: integer;
	mins: integer;
	secs: integer;
	end;

type aSPAWN =
	record
	X, Y: integer;
	dir: integer;
	end;

type aENEMY =
	record
	SPAWN: array [0..2] of aSPAWN;
	aType: integer;
	end;

const
PLAYER = 0;
ALLY = 5;
MAX_PLAYERS = 1;

// CHANGEABLE
MUSIC_VOLUME = 1.0;
HOURS_TO_FINAL_ATTACK = 2;  // 2:30:00
MINS_TO_FINAL_ATTACK = 30;
HARASS_BREAK = 180; //secs
HARASS_BREAK_RANDOM = 60; // 120 + random(120) secs
HARASS_START_AMOUNT = 3;
HARASS_AMOUNT_RISER = 0.16;
HARASS_RANGED_TYPE = 17;
TIME_TO_STOP_HARASS = '0:30:15';

//AI
AI_THINK_SLOWER = 90; //every 10 secs 
AI_RETREAT_TILE = 5;
AI_RETREAT_RADIUS = 7;
AI_SNIFF_RADIUS = 3;
AI_SMELL_RADIUS = 15;
AI_COVER_RADIUS = 30;
SH_X = 64;
SH_Y = 39;
MAX_X = 95;
MAX_Y = 111;

var
QUEST_NUMBER: integer;
TIMER: aTIMER;
TIMER_ON: boolean;
ENEMY: array [1..5] of aENEMY;
WARES: array [7..27] of integer;
HARASS_ENABLED: boolean;
HARASS_COUNTER: integer;
HARASS_AMOUNT: Single;
HARASS_PLAYER: integer;
HARASS_GROUPS: array of integer;
FINAL_GROUPS: array of integer;
FINAL_ENABLED: boolean;
PLAY_MUSIC: boolean;

//GLOBAL FUNCTIONS
function Sqr(A: integer): integer;
begin
	result:= ( A*A );
end;
procedure Test(a: integer);
begin
	Actions.ShowMsg(-1, 'test: ' + inttostr(a));
end;
function InRange(aInt, aFrom, aTo: integer): boolean;
begin
	Result := (aInt >= aFrom) and (aInt <= aTo);
end;

/////////////////////////
// AI
function InArea(tX, tY, pX, pY, radius: integer): boolean;
begin
	result:= false;
	if ( Abs(pX - tX) <= Abs(radius) ) and ( Abs(pY - tY) <= Abs(radius) ) then begin
		result:= true;
	end;
end;
function ClosestEnemyHouseType(aPlayer, hType, X, Y, radius:Integer): Integer; 
var 
Houses: array of Integer; 
i, j, BestDistanceSqr, ThisDistanceSqr, DX, DY: Integer;
begin
	Result := -1;
	for j := 0 to 0 do begin
		if (States.PlayerEnabled(j) = true) and (States.PlayerDefeated(j) = false) and (j <> aPlayer) then begin
			if( States.PlayerAllianceCheck(aPlayer, j) <> true ) then begin	
				Houses := States.PlayerGetAllHouses(j);
				for i := 0 to Length(Houses) -1 do begin
					if ( States.HouseDestroyed(Houses[i]) = false ) and ( States.HouseType(Houses[i]) = hType ) then begin
						DX := X - States.HousePositionX(Houses[i]);
						DY := Y - States.HousePositionY(Houses[i]);
						ThisDistanceSqr := (DX*DX) + (DY*DY);
						if ((Abs(DX)<radius) and (Abs(DY)<radius)) and ((Result = -1) or (ThisDistanceSqr < BestDistanceSqr)) then begin
							BestDistanceSqr := ThisDistanceSqr;
							Result := Houses[i];
						end;
					end;
				end;
			end;
		end;
	end;
end;
function ClosestEnemyHouse(aPlayer, X, Y, radius:Integer): Integer; 
var 
Houses: array of Integer; 
i, j, BestDistanceSqr, ThisDistanceSqr, DX, DY: Integer;
begin
	Result := -1;
	for j := 0 to 0 do begin
		if (States.PlayerEnabled(j) = true) and (States.PlayerDefeated(j) = false) and (j <> aPlayer) then begin
			if( States.PlayerAllianceCheck(aPlayer, j) <> true ) then begin	
				Houses := States.PlayerGetAllHouses(j);
				for i := 0 to Length(Houses) -1 do begin
					if States.HouseDestroyed(Houses[i]) = false then begin
						DX := X - States.HousePositionX(Houses[i]);
						DY := Y - States.HousePositionY(Houses[i]);
						ThisDistanceSqr := (DX*DX) + (DY*DY);
						if ((Abs(DX)<radius) and (Abs(DY)<radius)) and ((Result = -1) or (ThisDistanceSqr < BestDistanceSqr)) then begin
							BestDistanceSqr := ThisDistanceSqr;
							Result := Houses[i];
						end;
					end;
				end;
			end;
		end;
	end;
end;
function ClosestEnemyUnit(aPlayer, X, Y, radius:Integer): Integer; 
var 
Units: array of Integer; 
i, j, BestDistanceSqr, ThisDistanceSqr, DX, DY: Integer;
begin
	Result := -1;
	for j := 0 to 0 do begin
		if (States.PlayerEnabled(j) = true) and (States.PlayerDefeated(j) = false) and (j <> aPlayer) then begin
			if( States.PlayerAllianceCheck(aPlayer, j) <> true ) then begin
				Units := States.PlayerGetAllUnits(j);
				for i := 0 to Length(Units) -1 do begin
					if InRange(States.UnitType(Units[i]), 14, 27) and ( States.UnitDead(Units[i]) = false ) then begin
						DX := X - States.UnitPositionX(Units[i]);
						DY := Y - States.UnitPositionY(Units[i]);
						ThisDistanceSqr := (DX*DX) + (DY*DY);
						if ((Abs(DX)<radius) and (Abs(DY)<radius)) and ((Result = -1) or (ThisDistanceSqr < BestDistanceSqr)) then begin
							BestDistanceSqr := ThisDistanceSqr;
							Result := Units[i];
						end;
					end;
				end;
			end;
		end;
	end;
end;
function ClosestEnemyUnitGType(aPlayer, gType, X, Y, radius:Integer): Integer; 
var 
Units: array of Integer; 
i, j, BestDistanceSqr, ThisDistanceSqr, DX, DY: Integer;
begin
	Result := -1;
	for j := 0 to 0 do begin
		if (States.PlayerEnabled(j) = true) and (States.PlayerDefeated(j) = false) and (j <> aPlayer) then begin
			if( States.PlayerAllianceCheck(aPlayer, j) <> true ) then begin
				Units := States.PlayerGetAllUnits(j);
				for i := 0 to Length(Units) -1 do begin
					if InRange(States.UnitType(Units[i]), 14, 27) and ( States.UnitDead(Units[i]) = false ) and (States.GroupType(States.UnitsGroup(Units[i])) = gType ) then begin
						DX := X - States.UnitPositionX(Units[i]);
						DY := Y - States.UnitPositionY(Units[i]);
						ThisDistanceSqr := (DX*DX) + (DY*DY);
						if ((Abs(DX)<radius) and (Abs(DY)<radius)) and ((Result = -1) or (ThisDistanceSqr < BestDistanceSqr)) then begin
							BestDistanceSqr := ThisDistanceSqr;
							Result := Units[i];
						end;
					end;
				end;
			end;
		end;
	end;
end;
function ClosestPlayerGroupType(aPlayer, gType, X, Y, radius:Integer): Integer; 
var 
Groups: array of Integer; 
i, BestDistanceSqr, ThisDistanceSqr, DX, DY, fUnit: Integer;
begin
	Result := -1;
	Groups := States.PlayerGetAllGroups(aPlayer);
	for i := 0 to Length(Groups) -1 do begin
		if ( States.GroupDead(Groups[i]) = false ) and ( States.GroupType(Groups[i]) = gType ) then begin
			fUnit:=States.GroupMember(Groups[i], 0);
			DX := X - States.UnitPositionX(fUnit);
			DY := Y - States.UnitPositionY(fUnit);
			ThisDistanceSqr := (DX*DX) + (DY*DY);
			if (States.UnitPositionX(fUnit) < 198) and ((Abs(DX)<radius) and (Abs(DY)<radius)) and ((Result = -1) or (ThisDistanceSqr < BestDistanceSqr)) then begin
				BestDistanceSqr := ThisDistanceSqr;
				Result := Groups[i];
			end;
		end;
	end;
end;
function ClosestPlayerUnitType(aPlayer, uType, X, Y, radius:Integer): Integer; 
var 
Groups: array of Integer; 
i, BestDistanceSqr, ThisDistanceSqr, DX, DY, fUnit: Integer;
begin
	Result := -1;
	Groups := States.PlayerGetAllGroups(aPlayer);
	for i := 0 to Length(Groups) -1 do begin
		if ( States.GroupDead(Groups[i]) = false ) and ( States.UnitType(States.GroupMember(Groups[i], 0)) = uType ) then begin
			fUnit:=States.GroupMember(Groups[i], 0);
			DX := X - States.UnitPositionX(fUnit);
			DY := Y - States.UnitPositionY(fUnit);
			ThisDistanceSqr := (DX*DX) + (DY*DY);
			if ((Abs(DX)<radius) and (Abs(DY)<radius)) and ((Result = -1) or (ThisDistanceSqr < BestDistanceSqr)) then begin
				BestDistanceSqr := ThisDistanceSqr;
				Result := Groups[i];
			end;
		end;
	end;
end;
function AttackGroup(aGroup, aTarget: integer): boolean;
begin
	result:= true;
	if aTarget > 0 then begin
		Actions.GroupOrderAttackUnit(aGroup, aTarget);
		result:= false;
	end;
end;
function AttackHouse(aGroup, aTarget: integer): boolean;
begin
	result:= true;
	if ( aTarget > 0 ) and ( not States.HouseDestroyed(aTarget) ) then begin
		Actions.GroupOrderAttackHouse(aGroup, aTarget);
		result:= false;
	end;
end;
function CoverGroup(aGroup, aTarget: integer): boolean;
begin
	result:= true;
	if ( aTarget > 0 ) then begin
		if not InArea(States.UnitPositionX(States.GroupMember(aGroup, 0)), States.UnitPositionY(States.GroupMember(aGroup, 0)), States.UnitPositionX(States.GroupMember(aTarget, 0)), States.UnitPositionY(States.GroupMember(aTarget, 0)), 2) then
			Actions.GroupOrderWalk(aGroup, States.UnitPositionX(States.GroupMember(aTarget, 0)), States.UnitPositionY(States.GroupMember(aTarget, 0)), States.UnitDirection(States.GroupMember(aTarget, 0)));
		result:= false;
	end;
end;
function DirectionToOX(aDir, radius: integer): integer;
begin
	case aDir of
	1: RESULT := +radius;
	2: RESULT := +radius;
	3: RESULT := +radius;
	
	5: RESULT := -radius;
	6: RESULT := -radius;
	7: RESULT := -radius;
    else RESULT := 0; 
  end
end;
function DirectionToOY(aDir, radius: integer): integer;
begin
	case aDir of
	5: RESULT := +radius;
	4: RESULT := +radius;
	3: RESULT := +radius;
	
	7: RESULT := -radius;
	0: RESULT := -radius;
	1: RESULT := -radius;
    else RESULT := 0; 
  end
end;
function RetreatRange(aGroup, radius: integer): boolean;
var m, d, u: integer;
begin
	result:= true;
	m:= States.GroupMember(aGroup, 0);
	u:= ClosestEnemyUnit(States.UnitOwner(m), States.UnitPositionX(m), States.UnitPositionY(m), radius);
	if ( u > 0 ) then begin
		d:= States.UnitDirection(u);
		if InRange(States.UnitPositionX(m)+DirectionToOX(d, AI_RETREAT_TILE), 1, MAX_X) and InRange(States.UnitPositionY(m)+DirectionToOY(d, AI_RETREAT_TILE), 1, MAX_Y) then begin
			Actions.GroupOrderWalk(aGroup, States.UnitPositionX(m)+DirectionToOX(d, AI_RETREAT_TILE), States.UnitPositionY(m)+DirectionToOY(d, AI_RETREAT_TILE), d);
			result:= false;
		end;
	end;
end;
function HaltGroup(aGroup: integer): boolean;
begin
	result:= true;
	if ( aGroup > 0 ) then begin
		Actions.GroupOrderHalt(aGroup);
		result:= false;
	end;
end;
procedure AIThinkFinal(var aGroups: array of integer);
var
j, x, y, p, g, h: integer;
begin
 if Length(aGroups) > 0 then begin
	for j:= 0 to Length(aGroups)-1 do begin
		g:= aGroups[j];
		if States.GroupDead(g) = false then begin
			x:= States.UnitPositionX(States.GroupMember(g, 0));
			y:= States.UnitPositionY(States.GroupMember(g, 0));
			p:= States.GroupOwner(g);
			if States.GroupType(g) = 2 then begin //ranged
				if RetreatRange(g, AI_RETREAT_RADIUS) then
					if AttackGroup(g, ClosestEnemyUnitGType(p, 2, x, y, AI_SMELL_RADIUS-4)) then
						if AttackHouse(g, ClosestEnemyHouseType(p, 17, x, y, AI_SMELL_RADIUS)) then
							if AttackGroup(g, ClosestEnemyUnit(p, x, y, AI_SMELL_RADIUS-7)) then
								AttackHouse(g, ClosestEnemyHouse(p, x, y, 100));
			end else begin//melee
				if AttackGroup(g, ClosestEnemyUnit(p, x, y, AI_SNIFF_RADIUS)) then
					if AttackHouse(g, ClosestEnemyHouse(p, x, y, AI_SNIFF_RADIUS+1)) then begin
						h:= ClosestEnemyHouseType(p, 17, x, y, AI_SMELL_RADIUS+3);
						if h > 0 then
							CoverGroup(g, ClosestPlayerGroupType(p, 2, x, y, AI_COVER_RADIUS))
						else
							if AttackGroup(g, ClosestEnemyUnit(p, x, y, AI_SMELL_RADIUS-4)) then
								AttackHouse(g, ClosestEnemyHouse(p, x, y, 100));
					end;
			end;
		end;
	end;
 end;
end;
// END AI

////////////////////////

// FINAL ARMY
procedure SpawnFinalArmy;
var wX, wY, rX, rY: integer;
begin
	wX:= 21;
	wY:= 100;
	rX:= 19;
	rY:= 104;
	SetLength(FINAL_GROUPS, 10);
	FINAL_GROUPS[0]:= Actions.GiveGroup(1, 23, wX, wY, 0, 15, 5);
	FINAL_GROUPS[1]:= Actions.GiveGroup(1, 25, rX, rY, 0, 20, 10);
	FINAL_GROUPS[2]:= Actions.GiveGroup(2, 16, wX, wY, 0, 15, 5);
	FINAL_GROUPS[3]:= Actions.GiveGroup(3, 14, wX, wY, 0, 30, 10);
	FINAL_GROUPS[4]:= Actions.GiveGroup(3, 17, rX, rY, 0, 20, 10);
	FINAL_GROUPS[5]:= Actions.GiveGroup(4, 15, wX, wY, 0, 20, 10);
	FINAL_GROUPS[6]:= Actions.GiveGroup(4, 17, rX, rY, 0, 15, 5);
	FINAL_GROUPS[7]:= Actions.GiveGroup(4, 19, wX, wY, 0, 15, 5);
	FINAL_GROUPS[8]:= Actions.GiveGroup(2, 20, wX, wY, 0, 15, 5);
	FINAL_GROUPS[9]:= Actions.GiveGroup(2, 18, rX, rY, 0, 15, 5);
	Actions.PlayWAVFadeMusic(PLAYER, 'kevin_mcleod_unrelenting', MUSIC_VOLUME);
end;

// SPAWNS
function AddSpawn(aX, aY, aDir: integer): aSPAWN;
var A: aSPAWN;
begin
	A.X:=aX;
	A.Y:=aY;
	A.dir:=aDir;
	result:= A;
end;
procedure SetSpawnPositons;
var j: integer;
begin
	ENEMY[1].SPAWN[0]:= AddSpawn(11, 106, 1);
	ENEMY[1].SPAWN[1]:= AddSpawn(73, 106, 0);
	ENEMY[1].aType:= 23;
	ENEMY[2].SPAWN[0]:= AddSpawn(60, 105, 1);
	ENEMY[2].SPAWN[1]:= AddSpawn(6, 81, 0);
	ENEMY[2].aType:= 16;
	ENEMY[3].SPAWN[0]:= AddSpawn(7, 55, 1);
	ENEMY[3].SPAWN[1]:= AddSpawn(72, 5, 0);
	ENEMY[3].aType:= 14;
	ENEMY[4].SPAWN[0]:= AddSpawn(7, 61, 1);
	ENEMY[4].SPAWN[1]:= AddSpawn(7, 11, 0);
	ENEMY[4].aType:= 15;
end;

// TIMER
function SetTimer(aHour, aMin, aSec: integer): aTimer;
var Timer: aTimer;
begin
	Timer.hours:= aHour;
	Timer.mins:= aMin;
	Timer.secs:= aSec;
	Timer.enabled:= true;
	result:= Timer;
end;
function DecreaseTimer(var aTimer: aTIMER): boolean; //returns true if 00:00
begin
	result:= false;
	if aTimer.enabled then begin
		aTimer.secs:= aTimer.secs - 1;
		if ( aTimer.secs <= 0 ) and ( aTimer.mins > 0 ) then begin
			aTimer.mins:= aTimer.mins - 1;
			aTimer.secs:= 59;
		end;
		if ( aTimer.secs <= 0 ) and ( aTimer.mins <= 0 ) and ( aTimer.hours > 0 ) then begin
			aTimer.hours:= aTimer.hours - 1;
			aTimer.mins:= 60;
		end;
		if ( aTimer.secs <= 0 ) and ( aTimer.mins <= 0 ) and ( aTimer.hours <= 0 ) then begin
			aTimer.enabled:= false;
			result:= true;
		end;
	end;
end;
function ShowTimer(aTimer: aTIMER): AnsiString;
var str: AnsiString;
begin
	result:= '';
	//if aTimer.hours < 10 then
	//	str:= '0' + IntToStr(aTimer.hours)
	//else
		str:= IntToStr(aTimer.hours);
	str:= str + ':';
	if aTimer.mins < 10 then
		str:= str + '0' + IntToStr(aTimer.mins)
	else
		str:= str + IntToStr(aTimer.mins);
	str:= str + ':';
	if aTimer.secs < 10 then
		str:= str + '0' + IntToStr(aTimer.secs)
	else
		str:= str + IntToStr(aTimer.secs);
	result:= str;
end;


//GATHER
function WareTypeToQuestCount(aType: integer): integer;
begin
  case aType of
	7: RESULT := 50; // gold
	
	16: RESULT := 20; //wshild
	17: RESULT := 20; //ir shild
	18: RESULT := 65; // lth armor
	19: RESULT := 55; //ir arm
	20: RESULT := 40; //axe
	21: RESULT := 20; //swords
	22: RESULT := 20; // lances
	23: RESULT := 20; //pikes
	24: RESULT := 25; // bow 
	25: RESULT := 15; //xbow
	26: RESULT := 25; //horses
    else RESULT := 0; 
  end
end;
function ArmyTypeToQuestCount(aType: integer): integer;
begin
  case aType of
	14: RESULT := 20; // milita
	15: RESULT := 15; //axe
	16: RESULT := 15; //swords
	
	17: RESULT := 20; // bow 
	18: RESULT := 12; //xbow
	
	19: RESULT := 15; // lances
	20: RESULT := 10; //pikes
	
	21: RESULT := 9; //scout
	22: RESULT := 6; //knight
	
    else RESULT := 0; 
  end
end;
procedure GetWaresCount;
var
A: array of integer;
j, k: integer;
begin
	for j:= 7 to 26 do 
		WARES[j]:= 0;
	A:= States.PlayerGetAllHouses(PLAYER);
	for j:= 0 to Length(A)-1 do begin
		for k:= 7 to 26 do begin
			if ( States.HouseResourceAmount(A[j], k) > 0 ) and ( WareTypeToQuestCount(k) > 0 ) then
				WARES[k]:= WARES[k] + States.HouseResourceAmount(A[j], k);
		end;
	end;
end;
procedure CheckQuests;
var j, c, w: integer;
begin
	if QUEST_NUMBER = 1 then begin
		c:= 0;
		w:= 0;
		for j:= 7 to 26 do begin
			if WareTypeToQuestCount(j) > 0 then begin
				if WARES[j] >= WareTypeToQuestCount(j) then
					c:= c + 1;
				if c = 12 then begin
					w:= w + 1;
				end;
			end;
		end;
		for j:= 14 to 22 do begin
			if States.StatUnitTypeCount(PLAYER, j) >= ArmyTypeToQuestCount(j) then
				c:= c + 1;
			if c = 9 then begin
				w:= w + 1;
			end;
		end;
		if w = 2 then
			Actions.PlayerWin([PLAYER], true);
	end;
end;

// HARASS
procedure SpawnHarassArmies(aPlayer, aCount: integer; aRanged: boolean);
var r: integer;
begin
 if InRange(aPlayer, 1, 4) then begin
	r:= States.KamRandomI(2);
	if aRanged then begin
		SetLength(HARASS_GROUPS, 2);
		HARASS_GROUPS[1]:= Actions.GiveGroup(aPlayer, HARASS_RANGED_TYPE, ENEMY[aPlayer].SPAWN[r].X, ENEMY[aPlayer].SPAWN[r].Y, ENEMY[aPlayer].SPAWN[r].dir, Round(aCount/2), Round(Sqrt(aCount)+1));
	end else
		SetLength(HARASS_GROUPS, 1);
	if aPlayer = 3 then
		aCount:= Round(aCount*1.7);
	if aPlayer = 1 then
		aCount:= Round(aCount*0.7);
	HARASS_GROUPS[0]:= Actions.GiveGroup(aPlayer, ENEMY[aPlayer].aType, ENEMY[aPlayer].SPAWN[r].X, ENEMY[aPlayer].SPAWN[r].Y, ENEMY[aPlayer].SPAWN[r].dir, aCount, Round(Sqrt(aCount)+1));
 end;
end;
procedure HarassPlayer;
begin
	if HARASS_ENABLED then begin
		HARASS_COUNTER:= HARASS_COUNTER - 1;
		if HARASS_COUNTER <= 0 then begin
			if PLAY_MUSIC then begin
				Actions.PlayWAVFadeMusic(PLAYER, 'kevin_mcleod_unrelenting', MUSIC_VOLUME);
				PLAY_MUSIC:= false;
			end;
			if Round(HARASS_AMOUNT + HARASS_AMOUNT_RISER) > HARASS_AMOUNT then
				SpawnHarassArmies(HARASS_PLAYER, Round(HARASS_AMOUNT), true)
			else
				SpawnHarassArmies(HARASS_PLAYER, Round(HARASS_AMOUNT), false);
			HARASS_AMOUNT:= HARASS_AMOUNT + HARASS_AMOUNT_RISER;
			HARASS_PLAYER:= HARASS_PLAYER + 1;
			if HARASS_PLAYER > 5 then
				HARASS_PLAYER:= 1;
			HARASS_COUNTER:= HARASS_BREAK + States.KamRandomI(HARASS_BREAK_RANDOM);
		end;
	end;
end;

// SCORE - LABELS
procedure ShowMissionObjectives(aPlayer: integer);
var j: integer;
begin
	Actions.OverlayTextSetFormatted(aPlayer, '<$4>', []);
	if TIMER_ON then
		Actions.OverlayTextAppend(aPlayer, ShowTimer(TIMER));
	Actions.OverlayTextAppend(aPlayer, '|');
	if QUEST_NUMBER = 1 then begin
		Actions.OverlayTextAppendFormatted(aPlayer, '<$6>', []);
		Actions.OverlayTextAppend(aPlayer, '|');
		for j:= 7 to 26 do begin
			if WareTypeToQuestCount(j) > 0 then begin
				if WARES[j] >= WareTypeToQuestCount(j) then
					Actions.OverlayTextAppendFormatted(aPlayer, '<$9>', [States.WareTypeName(j)])
				else
					Actions.OverlayTextAppendFormatted(aPlayer, '<$8>', [States.WareTypeName(j), WARES[j], WareTypeToQuestCount(j)]);
				Actions.OverlayTextAppend(aPlayer, '|');
			end;
		end;
		Actions.OverlayTextAppendFormatted(aPlayer, '<$10>', []);
		Actions.OverlayTextAppend(aPlayer, '|');
		for j:= 14 to 22 do begin
			if States.StatUnitTypeCount(PLAYER, j) >= ArmyTypeToQuestCount(j) then
				Actions.OverlayTextAppendFormatted(aPlayer, '<$9>', [States.UnitTypeName(j)])
			else
				Actions.OverlayTextAppendFormatted(aPlayer, '<$8>', [States.UnitTypeName(j), States.StatUnitTypeCount(PLAYER, j), ArmyTypeToQuestCount(j)]);
			Actions.OverlayTextAppend(aPlayer, '|');
		end;
	end;
	if QUEST_NUMBER = 3 then begin
		Actions.OverlayTextAppendFormatted(aPlayer, '<$11>', []);
		Actions.OverlayTextAppend(aPlayer, '|');
	end;
end;

// GLOBAL EVENTS
procedure OnUnitDied(aUnitID, aKillerIndex: integer);
begin
	if ((States.StatArmyCount(1)+States.StatArmyCount(2)+States.StatArmyCount(3)+States.StatArmyCount(4)) <= 0 ) and FINAL_ENABLED then 
		Actions.PlayerWin([PLAYER], true);
end;
procedure OnHouseDestroyed(aHouse, aDestroyerIndex: integer);
begin
	if ( States.StatHouseTypeCount(PLAYER, 11) <= 0 ) and ( States.StatHouseTypeCount(PLAYER, 13) <= 0 ) and ( States.StatHouseTypeCount(PLAYER, 21) <= 0 ) then
		Actions.PlayerDefeat(PLAYER);
end;
//								ON TICK
procedure OnTick;
begin
	if ( States.GameTime mod 10 = 0 ) then begin
		if DecreaseTimer(TIMER) then begin
			SpawnFinalArmy;
			FINAL_ENABLED:= true;
		end;
		CheckQuests;
		ShowMissionObjectives(PLAYER);
		HarassPlayer;
		if TIME_TO_STOP_HARASS = ShowTimer(TIMER) then begin
			HARASS_ENABLED:= false;
			Actions.ShowMsgFormatted(PLAYER, '<$1>', []);
			Actions.GroupOrderWalk(Actions.GiveGroup(PLAYER, 21, 17, 97, 0, 4, 2), 59, 43, 4);
		end;
	end;
	if ( States.GameTime mod 50 = 0 ) then begin
		GetWaresCount;
	end;
	if ( States.GameTime mod AI_THINK_SLOWER = 0 ) then begin
		if HARASS_ENABLED then
			AIThinkFinal(HARASS_GROUPS);
		if FINAL_ENABLED then
			AIThinkFinal(FINAL_GROUPS);
	end;
end;
// 								ON MISSION START
procedure OnMissionStart;
begin
	QUEST_NUMBER:= 1;
	SetSpawnPositons;
	GetWaresCount;
	Actions.ShowMsgFormatted(PLAYER, '<$0>', []);
	TIMER:= SetTimer(HOURS_TO_FINAL_ATTACK ,MINS_TO_FINAL_ATTACK, 0);
	TIMER_ON:= true;
	FINAL_ENABLED:= false;
	HARASS_PLAYER:= 3;
	HARASS_ENABLED:= true;
	HARASS_COUNTER:= HARASS_BREAK;
	HARASS_AMOUNT:= HARASS_START_AMOUNT;
end;