var 
  NextMsg: Integer;
  NextTime: Integer;
  MsgShown: array [0..29] of Boolean;

  procedure Show(aMsg, aNextMsg: Byte);
  begin
    if MsgShown[aMsg] then Exit; //Show messages only once

    Actions.ShowMsg(0, aMsg);
    if aNextMsg <> 0 then
    begin
      NextMsg := aNextMsg;
      NextTime := States.GameTime + 100;
    end;
    MsgShown[aMsg] := True;
  end;

procedure OnHouseBuilt(aIndex: Integer; aHouseType: Integer);
begin
  if aIndex = 0 then //Make sure we process only human player
  case aHouseType of
    13: Show(4,5);
    27: Show(6,0);
    14: Show(7,0);
     9: Show(8,0);
     0: Show(9,0);
     6: Show(10,0);
     8: Show(11,0);
    22: Show(12,0);
     7: Show(13,0);
    28: Show(14,0);
    16: Show(15,0);
    24: Show(16,0);
    21: Show(17,18);
    19: Show(19,20);
    25: Show(21,0);
    20: Show(22,23);
  end;
end;

procedure OnPlayerDefeated(aIndex: Integer);
begin
  if aIndex = 1 then Actions.ShowMsg(0, 24);
  if aIndex = 2 then Actions.ShowMsg(0, 25);
end;

begin
  if States.GameTime = 30 then Actions.ShowMsg(0, 1);
  if States.GameTime = 160 then Actions.ShowMsg(0, 2);
  if States.GameTime = 340 then Actions.ShowMsg(0, 3);

  if States.GameTime = NextTime then Actions.ShowMsg(0, NextMsg);
end.
