const
  TIME_TO_HOLD_HILL = 5*60*10; //5 minutes
  MAX_TIME_AWAY = 2*10; //2 seconds
  HILL_X = 122;
  HILL_Y = 119;
var
  King: Integer; //Current king of the hill
  TimeBecameKing: Integer; //The time at which the current king became king
  TimeLeftHill: Integer; //The time the king left the hill (stepping off hill for a few seconds is allowed)
  GameEnded: Boolean; //Has somebody won the game yet?

//Initialise variables here
procedure OnMissionStart;
begin
  King := -1;
  TimeLeftHill := -1;
  GameEnded := False;
end;

procedure ShowKingDisplay;
var Time, Mins, Secs: Integer;
begin
  if King = -1 then
    Actions.OverlayTextSet(-1, '<$1>') //Nobody is king
  else
  begin
    //Calculate the time left before the king wins
    Time := (TimeBecameKing + TIME_TO_HOLD_HILL) - States.GameTime;
    if (Time <= 0) and not GameEnded then
    begin
      //Declare king and his team victorious. All other players will get set to defeated.
      Actions.PlayerWin([King], True);
	  GameEnded := True;
    end;
	if GameEnded then
      Time := 0; //Don't show negative time

	//Show the countdown
    Mins := Time div 600;
    Secs := (Time div 10) mod 60;
    Actions.OverlayTextSetFormatted(-1, '<$2>', [States.PlayerColorText(King), States.PlayerName(King), Mins, Secs]);
  end;
end;

function IsSoldier(UnitID: Integer): Boolean;
var UnitType: Integer;
begin
  if UnitID = -1 then
    Result := False
  else
  begin
    UnitType := States.UnitType(UnitID);
    Result := (UnitType >= 14) and (UnitType <= 27); //valid range of soldiers
  end;
end;

//Returns the owner of the unit currently on the hill, or -1 if nobody is on the hill
function GetCurrentHillOwner: Integer;
var
  UnitOwner, X, Y: Integer;
  U: Integer;
begin
  Result := -1;
  //Check 3 by 3 square around the hill
  for X := -1 to 1 do
    for Y := -1 to 1 do
	begin
      U := States.UnitAt(HILL_X+X, HILL_Y+Y);
      if IsSoldier(U) then
      begin
        UnitOwner := States.UnitOwner(U);
        //Owner = -1 means invalid, -2 means animals
        if (UnitOwner <> -1) and (UnitOwner <> -2) then
		begin
		  //If we haven't found anybody else on the hill yet, this player is the owner for now
		  if Result = -1 then
            Result := UnitOwner
		  else
		    if (Result <> UnitOwner) and not States.PlayerAllianceCheck(Result, UnitOwner) then
			begin
			  //The hill has more than one player on it (not allies), so nobody owns it
			  Result := -1;
			  Exit;
			end;
		end;
      end;
	end;
end;

procedure UpdateKing;
var NewKing: Integer;
begin
  if GameEnded then Exit; //Don't process anything if the game is over

  NewKing := GetCurrentHillOwner;
  //If the king just left the hill, we give him a moment to return (due to units pushing each other)
  if (NewKing = -1) and (King <> -1) then
  begin
    if TimeLeftHill = -1 then
      TimeLeftHill := States.GameTime //Remember when they left the hill (now)
    else
      if States.GameTime >= TimeLeftHill+MAX_TIME_AWAY then
        King := -1; //King has gone
  end
  else
  begin
    TimeLeftHill := -1;
    //Is this a different king (from a different team) to last time?
    if (NewKing <> -1) and (NewKing <> King) and not States.PlayerAllianceCheck(NewKing, King) then
      TimeBecameKing := States.GameTime; //Remember when they became king for the countdown
    King := NewKing;
  end;
end;

procedure OnTick;
begin
  UpdateKing;
  ShowKingDisplay;
end;
